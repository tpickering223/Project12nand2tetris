// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array screen;
	static boolean color;
	

    /** Initializes the Screen. */
    function void init() {
	let screen = 16384;
	let color = true;
	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	var int pixel;
	let pixel = 0;
	while(pixel < 8192) {
		let screen[pixel] = false;
	}
	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
	var int screen_addr, spot;
 	let screen_addr = (x / 16) + (y * 36);
	let spot = powerofTwo(x & 15);

	if(color) {
	 	let screen[screen_addr] = screen[screen_addr] | spot;
	}
	else { 
		let screen[screen_addr] = screen[screen_addr] & ~spot;
	}
	
	return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	var int a, b, adymbdx, dx, dy, swap;

	if(x2 < x1) {
		let swap = x1;
		let x1 = x2;
		let x2 = swap;

		let swap = y1;
		let y1 = y2;
		let y2 = swap;		

	}

	let dx = x2 - x1;
	let dy = y2 - y1;
	let a = 0;
	let b = 0;
	
	if(dy = 0) {
		do Screen.drawHorzLine(x1, x2, y1);

	}
	else {
		if(dx = 0) {
			do Screen.drawVertLine(x1, y1, y2);
		}
		else {
		let adymbdx = 0;	
		     if(y1 < y2) {
			while( ~(a > dx) & ~(b > dy) ) {
				do Screen.drawPixel(x1 + a, y1 + b);
				
				if(adymbdx > 0) {
					let a = a + 1;
					let adymbdx = adymbdx + dy;
				}
				else { 
					let b = b + 1;
					let adymbdx = adymbdx - dx;
				}
		
			}
	

	              }
		      else {
			while( ~(a > dx) & ~(b < dy)) {
				do Screen.drawPixel(x1 + a, y1 - b);
				
				if(adymbdx > 0) {
					let a = a + 1;
					let adymbdx = adymbdx + dy;
				}
				else { 
					let b = b + 1;
					let adymbdx = adymbdx - dx;
				}

			}


		      }



		}

	}
	return;
    }



	
    function void drawHorzLine(int x1, int x2, int y) {
	var int swap;
	
	if(x1 > x2) {
		let swap = x1;
		let x1 = x2;
		let x2 = swap;

	}
	while(~(x2 < x1)) {
		do Screen.drawPixel(x1, y);
		let x1 = x1 + 1;
	}
	return;
    }

    function int powerOfTwo(int x) {
	var int two;
	let two = 2;
	if(x = 0) {
		return 1;
	}
	if(x = 1) {
		return 2;
	}
	while(~(x = 0)) {
		let two = two*two;
		let x = x - 1;
	}
	return two;
    }
    function void drawVertLine(int x, int y1, int y2) {
	var int swap;
	
	if(y1 > y2) {
		let swap = y1;
		let y1 = y2;
		let y2 = swap;

	}
	while(~(y2 < y1)) {
		do Screen.drawPixel(x, y1);
		let y1 = y1 + 1;
	}
	return;


    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	while ( ~(x1 < x2)) {
		do Screen.drawVertLine(x1, y1, y2);
		let x1 = x1 + 1;
	}
	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
	var int dy, sqr, r2;
	let r2 = r*r;
	let dy = -r;

	while( ~(dy > r) ) {
		let sqr = Math.sqrt(r2 - (dy*dy) );
		do Screen.drawHorzLine( x - sqr, x + sqr, y + dy);
		let dy = dy + 1;
	} 
	return;
    }
}
