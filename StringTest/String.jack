// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array cString;
	field int length, maxL;
	
	

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	if(maxLength = 0) {
		let maxLength = 1;
	}
	let length = 0;
	let maxL = maxLength;
	let cString = Array.new(maxL);
	return this;
    }

    /** Disposes this string. */
    method void dispose() {
	do cString.dispose();
	return;
    }

    /** Returns the current length of this string. */
    method int length() {
	return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	return cString[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	let cString[j] = c;
	return;	
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	if(length < maxL) {
		let cString[length] = c;
		let length = length + 1;
	}
	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	if(length > 0) {
		let length = length - 1;
	}
	return;
    }



     /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	var int result, i;
	var boolean sign, isNum;
	let result = 0;
	if(length = 0) {
		return result;
	}
	if(cString[0] = 45) {
		let sign = true;
		let i = 1;
	}
	else {
		let sign = false;
		let i = 0;
	}

	if ((cString[i] > 47) & (cString[i] < 58)) {
		let isNum = true;
	}
	else {	let isNum = false;	}
	while ((i < length) & isNum) {
		let result = (cString[i] - 48) + (result * 10);
		let i = i + 1;
		if ((cString[i] > 47) & (cString[i] < 58)) {
			let isNum = true;
		}
		else { let isNum = false;	}
	}

	if(sign) {
		return -result;
	}
	else {
		return result;
	}
    }


    
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	let length = 0;
	
	if(val < 0) {
		let val = -val;
		do appendChar(45);
	}
	
	do divideAndConquer(val);
	
	return;
    }

    method void divideAndConquer(int val) {
	var int dividend;
	var int temp;
	if(val < 10) {
		do appendChar((val + 48));
	}
	else {
	let dividend = val / 10;
	do divideAndConquer(dividend);
	let temp = (val - (dividend * 10));
	let temp = temp + 48;
	do appendChar(temp);
	
	}
	return;
    }
	

    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }

}
