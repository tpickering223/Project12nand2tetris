// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array mem;
	static Array free;
	static Array endMem;

	static int heap;
	static int endHeap;

	static int length;
	static int get_next;

	static int block_size;

    /** Initializes the class. */
    function void init() {
	let heap = 2048;
	let endHeap = 16384;

	let length = 0;
	let get_next = 1;
	let mem = 0;

	let free = heap;
	let free[get_next] = null;
	let free[length] = 16384 - 2048;

	let block_size = -1;

	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let mem[address] = value;
	return;

    }




    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var Array block, nextBlock, prev;
	let block = free;	// Point to heap memory
	let prev = null;
	while(block[length] < size)  { // Can't fit in current block 
		let prev = block;
		let block = block[get_next]; // Point to next block.
		if(block = null) {
			return block_size;
		}
	}
	let nextBlock = block + size + 1;		  // Point to next free space just after allocated block.
	let nextBlock[length] = block[length] - size - 1; // Recover remaining free space in allocated block.
	let nextBlock[get_next] = block[get_next];
	let block[get_next] = nextBlock;
	
	if(prev = null) {
		let free = nextBlock;
	}
	else {
		let prev[get_next] = nextBlock;
	}
	return block + 1;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	var Array block;
	let block = o - 1;
	let block[get_next] = free;
	let free = block;
	return;
    }    
}
